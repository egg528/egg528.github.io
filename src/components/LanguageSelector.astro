---
import { LANGUAGES, getLocaleFromPath, createLocalizedUrl } from "@lib/i18n";

const locale = getLocaleFromPath(Astro.url.pathname);
const currentPath = Astro.url.pathname.replace(/^\/[a-z]{2}\//, "/").replace(/^\//, "");

const languageOptions = Object.values(LANGUAGES).map(lang => ({
  ...lang,
  href: createLocalizedUrl(currentPath, lang.code),
  isActive: locale === lang.code
}));
---

<div class="relative">
  <button 
    id="language-trigger"
    class="flex items-center gap-1 text-sm font-medium text-black dark:text-white opacity-60 hover:opacity-100 focus:opacity-100 focus:outline-none cursor-pointer transition-opacity duration-200"
  >
    <span id="current-language">{LANGUAGES[locale].label}</span>
    <svg 
      id="dropdown-arrow"
      class="w-3 h-3 transition-transform duration-200"
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div 
    id="language-dropdown" 
    class="absolute top-full right-0 mt-1 bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-black/10 dark:border-white/20 opacity-0 invisible transform scale-95 transition-all duration-200 z-50 min-w-[100px]"
  >
    {languageOptions.map(lang => (
      <a 
        href={lang.href}
        class={`block px-3 py-2 text-sm hover:bg-black/5 dark:hover:bg-white/10 transition-colors duration-150 ${
          lang.isActive ? "text-black dark:text-white font-medium" : "text-black/70 dark:text-white/70"
        } ${lang === languageOptions[0] ? "rounded-t-lg" : ""} ${lang === languageOptions[languageOptions.length - 1] ? "rounded-b-lg" : ""}`}
      >
        {lang.label}
      </a>
    ))}
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const trigger = document.getElementById("language-trigger");
    const dropdown = document.getElementById("language-dropdown");
    const arrow = document.getElementById("dropdown-arrow");
    
    if (!trigger || !dropdown || !arrow) return;
    
    function toggleDropdown() {
      if (!dropdown || !arrow) return;
      const isVisible = dropdown.classList.contains("opacity-100");
      
      if (isVisible) {
        dropdown.classList.remove("opacity-100", "visible", "scale-100");
        dropdown.classList.add("opacity-0", "invisible", "scale-95");
        arrow.classList.remove("rotate-180");
      } else {
        dropdown.classList.remove("opacity-0", "invisible", "scale-95");
        dropdown.classList.add("opacity-100", "visible", "scale-100");
        arrow.classList.add("rotate-180");
      }
    }
    
    function closeDropdown() {
      if (!dropdown || !arrow) return;
      dropdown.classList.remove("opacity-100", "visible", "scale-100");
      dropdown.classList.add("opacity-0", "invisible", "scale-95");
      arrow.classList.remove("rotate-180");
    }
    
    trigger.addEventListener("click", function(e) {
      e.stopPropagation();
      toggleDropdown();
    });
    
    // 외부 클릭시 드롭다운 닫기
    document.addEventListener("click", closeDropdown);
    
    // 드롭다운 내부 클릭시 이벤트 전파 방지
    if (dropdown) {
      dropdown.addEventListener("click", function(e) {
        e.stopPropagation();
      });
    }
  });
  
  // Astro의 페이지 전환시에도 이벤트 리스너 재등록
  document.addEventListener("astro:after-swap", function() {
    const trigger = document.getElementById("language-trigger");
    const dropdown = document.getElementById("language-dropdown");
    const arrow = document.getElementById("dropdown-arrow");
    
    if (!trigger || !dropdown || !arrow) return;
    
    function toggleDropdown() {
      if (!dropdown || !arrow) return;
      const isVisible = dropdown.classList.contains("opacity-100");
      
      if (isVisible) {
        dropdown.classList.remove("opacity-100", "visible", "scale-100");
        dropdown.classList.add("opacity-0", "invisible", "scale-95");
        arrow.classList.remove("rotate-180");
      } else {
        dropdown.classList.remove("opacity-0", "invisible", "scale-95");
        dropdown.classList.add("opacity-100", "visible", "scale-100");
        arrow.classList.add("rotate-180");
      }
    }
    
    function closeDropdown() {
      if (!dropdown || !arrow) return;
      dropdown.classList.remove("opacity-100", "visible", "scale-100");
      dropdown.classList.add("opacity-0", "invisible", "scale-95");
      arrow.classList.remove("rotate-180");
    }
    
    trigger.addEventListener("click", function(e) {
      e.stopPropagation();
      toggleDropdown();
    });
    
    document.addEventListener("click", closeDropdown);
    
    dropdown.addEventListener("click", function(e) {
      e.stopPropagation();
    });
  });
</script>